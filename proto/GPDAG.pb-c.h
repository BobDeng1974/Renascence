/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/GPDAG.proto */

#ifndef PROTOBUF_C_proto_2fGPDAG_2eproto__INCLUDED
#define PROTOBUF_C_proto_2fGPDAG_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _GP__Point GP__Point;


/* --- enums --- */

typedef enum _GP__Point__TYPE {
  GP__POINT__TYPE__FUNCTION = 0,
  GP__POINT__TYPE__INPUT = 1,
  GP__POINT__TYPE__STRING = 2,
  GP__POINT__TYPE__PARALLEL = 3,
  GP__POINT__TYPE__OUTPUT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GP__POINT__TYPE)
} GP__Point__TYPE;
typedef enum _GP__Point__PARALLELTPYE {
  GP__POINT__PARALLELTPYE__MAP = 0,
  GP__POINT__PARALLELTPYE__REDUCE = 1,
  GP__POINT__PARALLELTPYE__PAL_FUNCTION = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GP__POINT__PARALLELTPYE)
} GP__Point__PARALLELTPYE;

/* --- messages --- */

struct  _GP__Point
{
  ProtobufCMessage base;
  GP__Point__TYPE type;
  size_t n_children;
  GP__Point **children;
  /*
   *For INPUT
   */
  protobuf_c_boolean has_input_number;
  uint32_t input_number;
  /*
   *For PARALLEL
   */
  protobuf_c_boolean has_parallel_type;
  GP__Point__PARALLELTPYE parallel_type;
  /*
   *For PARALLEL
   */
  char *parallel_function;
  /*
   *For FUNCTION
   */
  char *function_name;
  /*
   *For STRING
   */
  char *content;
  /*
   *For OUTPUT
   */
  size_t n_output_names;
  char **output_names;
};
#define GP__POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gp__point__descriptor) \
    , GP__POINT__TYPE__INPUT, 0,NULL, 0,0, 0,0, NULL, NULL, NULL, 0,NULL }


/* GP__Point methods */
void   gp__point__init
                     (GP__Point         *message);
size_t gp__point__get_packed_size
                     (const GP__Point   *message);
size_t gp__point__pack
                     (const GP__Point   *message,
                      uint8_t             *out);
size_t gp__point__pack_to_buffer
                     (const GP__Point   *message,
                      ProtobufCBuffer     *buffer);
GP__Point *
       gp__point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gp__point__free_unpacked
                     (GP__Point *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*GP__Point_Closure)
                 (const GP__Point *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor gp__point__descriptor;
extern const ProtobufCEnumDescriptor    gp__point__type__descriptor;
extern const ProtobufCEnumDescriptor    gp__point__paralleltpye__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2fGPDAG_2eproto__INCLUDED */
