#pragma once

typedef unsigned char uchar;

inline int _my_max(int a, int b)
{
    return a>b?a:b;
}
inline int _my_min(int a, int b)
{
    return a>b?b:a;
}

struct ARGB2HSV
{
    typedef uchar channel_type;

    ARGB2HSV(int _srccn=4, int _blueIdx=0)
        : srccn(_srccn), blueIdx(_blueIdx), hrange(180) {}

    void operator()(const uchar* src, uchar* h_dst, uchar* s_dst, uchar* v_dst, int pitch, int width, int height) const
    {
        int bidx = blueIdx, scn = srccn;
        const int hsv_shift = 12;

        static const int div_table[] = {
            0, 1044480, 522240, 348160, 261120, 208896, 174080, 149211,
            130560, 116053, 104448, 94953, 87040, 80345, 74606, 69632,
            65280, 61440, 58027, 54973, 52224, 49737, 47476, 45412,
            43520, 41779, 40172, 38684, 37303, 36017, 34816, 33693,
            32640, 31651, 30720, 29842, 29013, 28229, 27486, 26782,
            26112, 25475, 24869, 24290, 23738, 23211, 22706, 22223,
            21760, 21316, 20890, 20480, 20086, 19707, 19342, 18991,
            18651, 18324, 18008, 17703, 17408, 17123, 16846, 16579,
            16320, 16069, 15825, 15589, 15360, 15137, 14921, 14711,
            14507, 14308, 14115, 13926, 13743, 13565, 13391, 13221,
            13056, 12895, 12738, 12584, 12434, 12288, 12145, 12006,
            11869, 11736, 11605, 11478, 11353, 11231, 11111, 10995,
            10880, 10768, 10658, 10550, 10445, 10341, 10240, 10141,
            10043, 9947, 9854, 9761, 9671, 9582, 9495, 9410,
            9326, 9243, 9162, 9082, 9004, 8927, 8852, 8777,
            8704, 8632, 8561, 8492, 8423, 8356, 8290, 8224,
            8160, 8097, 8034, 7973, 7913, 7853, 7795, 7737,
            7680, 7624, 7569, 7514, 7461, 7408, 7355, 7304,
            7253, 7203, 7154, 7105, 7057, 7010, 6963, 6917,
            6872, 6827, 6782, 6739, 6695, 6653, 6611, 6569,
            6528, 6487, 6447, 6408, 6369, 6330, 6292, 6254,
            6217, 6180, 6144, 6108, 6073, 6037, 6003, 5968,
            5935, 5901, 5868, 5835, 5803, 5771, 5739, 5708,
            5677, 5646, 5615, 5585, 5556, 5526, 5497, 5468,
            5440, 5412, 5384, 5356, 5329, 5302, 5275, 5249,
            5222, 5196, 5171, 5145, 5120, 5095, 5070, 5046,
            5022, 4998, 4974, 4950, 4927, 4904, 4881, 4858,
            4836, 4813, 4791, 4769, 4748, 4726, 4705, 4684,
            4663, 4642, 4622, 4601, 4581, 4561, 4541, 4522,
            4502, 4483, 4464, 4445, 4426, 4407, 4389, 4370,
            4352, 4334, 4316, 4298, 4281, 4263, 4246, 4229,
            4212, 4195, 4178, 4161, 4145, 4128, 4112, 4096
        };
        int hr = hrange, hscale = hr == 180 ? 15 : 21;
        
        for (int i=0; i<height; i++)
        {
            for (int j=0; j<width; j++, src += scn)
            {
                int b = src[bidx], g = src[1], r = src[bidx^2];
                int h, s, v = b;
                int vmin = b, diff;
                int vr, vg;

                v = _my_max(v, _my_max(r, g));
                vmin = _my_min(vmin, _my_min(r, g));

                diff = v - vmin;
                vr = v == r ? -1 : 0;
                vg = v == g ? -1 : 0;

                s = diff * div_table[v] >> hsv_shift;
                h = (vr & (g - b)) +
                    (~vr & ((vg & (b - r + 2 * diff)) + ((~vg) & (r - g + 4 * diff))));
                h = (h * div_table[diff] * hscale + (1 << (hsv_shift + 6))) >> (7 + hsv_shift);
                h += h < 0 ? hr : 0;

                h_dst[j] = (uchar)h;
                s_dst[j] = (uchar)s;
                v_dst[j] = (uchar)v;
            }
            h_dst += pitch;
            s_dst += pitch;
            v_dst += pitch;
        }
    }
    const int srccn, blueIdx, hrange;
};


struct HSV2ARGB
{
    HSV2ARGB(int _dstcn=4, int _blueIdx=0)
        : dstcn(_dstcn), blueIdx(_blueIdx), hrange(180), space(30){}
    void operator()(uchar* h_src, uchar* s_src, uchar* v_src, uchar* dst, int pitch, int width, int height) const
    {
        int dcn = dstcn;
        uchar alpha = 255;

        static const uchar sector_tab[181] = {
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
            2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
            3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
            4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            0
        };
        static const uchar h_tab[181] = {
            0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
            0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
            0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
            0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
            0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
            0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
            0
        };

        for (int i=0; i<height; i++)
        {
            for (int j=0; j<width; j++, dst += dcn)
            {
                uchar r,g,b;
                uchar h,s,v;
                h = h_src[j];
                s = s_src[j];
                v = v_src[j];
                if (s == 0)
                    r = g = b = v;
                else
                {
                    static const int sector_data[][3]=
                    {{1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0}};
                    uchar tab[4];
                    int sector = sector_tab[h];
                    
                    tab[0] = v;
                    tab[1] = (v * (256 - s))>>8;
                    h = h_tab[h];
                    h = _dif_tab[h][s];
                    tab[2] = (v * (256 - h))>>8;
                    tab[3] = (v * (256 - s + h))>>8;

                    b = tab[sector_data[sector][0]];
                    g = tab[sector_data[sector][1]];
                    r = tab[sector_data[sector][2]];
                }
                dst[blueIdx] = b;
                dst[1] = g;
                dst[blueIdx^2] = r;
                if( dcn == 4 )
                    dst[3] = alpha;

                
            }
            h_src += pitch;
            s_src += pitch;
            v_src += pitch;
        }
    }
    const int dstcn, blueIdx, hrange, space;

    static const uchar _dif_tab[30][256];
};
