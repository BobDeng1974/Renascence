一、分划定义
分划包括两部分，Key集合与数据索引
（1）Key集合：每个Key是一个数组，所有Key的维度相同
（2）Value集合/数据索引：用以在实际运算中根据Key值提取数据
一个分划中所有提取出的Value，必须是同一数据类型。

分划输入表示为 Split(x0), Split(x1)，等等

分划的具体实现依赖Renascense子执行器和算法库，在用户层面，分划就是一系列Key-Value对
注意：分划并非单独的一种数据结构，它的性质还与Value相关。
支持分划的数据类型(IStatusType)必须实现如下三个接口，以便平台作分布式/持久化实现：
vSave：将数据保存到输出流
vLoad：从输入流中创建并读取数据
vMeasure：测量数据所需要占内存的大小

二、分划的产生与终结
Split：将指定输入拆解为分划，由内置函数实现
维数可以不输入，这样由底层默认实现
示例表达式：Split(x0, 2);（将x0折成二维分划）

Merge：将指定分划合并到内存，由内置函数实现
示例表达式：Merge(Split(x0, 2)) = x0

三、分划运算符
分划运算符，输出结果均为一个分划
包括 Map, Reduce, Join


Map：对分划中的每组Value执行指定函数（可以是ADF），改变Value，不改变Key集
示例表达式：Map(Split(x0, 1), f(x0));
Map中的函数表达式必须是单输入的

Reduce：分划中的所有数据，对指定的Key维度进行合并（多个维度时按先后顺序空格隔开），Key集降维，Value为聚合后的Value
示例表达式：Reduce(Split(x0, 2), g(x0, x1), k0 k1);
Reduce算符认为 不改变合并的拓扑顺序，就不会影响最终结果（会基于此做并行），排序/求和/求最大值等满足此要示，连除不能满足要求。

Join：一般用于合并两个分划，也可以用来重塑一个分划内的Key集
示例表达式：Join([Split(A), Split(B)], Product_Unit(x0, x1), a0=b1, [[a0, a1], [b0, b1]]->[a1,b0,a0]);
格式为先输入 [分划集]，然后是运算式，接着是条件，最后是Key集向量函数。
Key表达式：第一个分划为a，第二个为b，第一个分划第一维为a0，第二维为a1，以此类推
注意：当Key出现重复时，除了第一个计算出的Key-Value对外，其他直接舍弃


四、典型例子
矩阵相乘的分划算法：
Product(Split(A), Split(B));
Merge(Reduce(Join([Split(A), Split(B)], Product_Unit(x0, x1), a0==b1, [[a0, a1], [b0, b1]]->[a1,b0,a0]), Add_Unit(x0, x1), [a2]))
