一、分划定义
分划包括两部分，Key集合与数据索引
（1）Key集合：每个Key是一个非负整数组，所有Key的维度相同
（2）Value集合/数据索引：用以在实际运算中根据Key值提取数据
一个分划中所有提取出的Value，必须是同一数据类型。

分划输入表示为 SPLIT(x0), SPLIT(x1)，等等

分划的具体实现依赖Renascense子执行器和算法库，在用户层面，分划就是一系列Key-Value对
注意：分划并非单独的一种数据结构，它的性质还与Value相关。
支持分划的数据类型(IStatusType)必须实现如下三个接口，以便平台作分布式/持久化实现：
vSave：将数据保存到输出流
vLoad：从输入流中创建并读取数据
vMeasure：测量数据所需要占内存的大小

二、分划的产生与终结
SPLIT：将指定输入拆解为分划，由下层库内置函数实现
维数可以不输入，这样由底层默认实现
示例表达式：SPLIT(x0, 2);（将x0折成二维分划）

MERGE：将指定分划合并到内存，由下层库内置函数实现
示例表达式：MERGE(SPLIT(x0, 2)) = x0

三、分划运算符
分划运算符，输出结果均为一个分划
包括 MAP, REDUCE


MAP：分划中的所有键值对，通过一个Key表达式计算新Key，新Key所对应的Value是经过函数计算后的Value。
示例表达式：MAP([SPLIT(x0, 1)], f(x0), [a0]->[a0], a0>=0);
输入：
1、分划集
2、执行的函数式
3、Key集变换函数
4、Key的准入条件
当Key集合不需要发生改变，只需要对每个Value应用函数时，后面两个Key表达式可以不输
如：MAP([SPLIT(x0)], f(x0));

可以输入多个分划，并做合并：
示例表达式：MAP([SPLIT(A), SPLIT(B)], Product(x0, x1), [[a0, a1], [b0, b1]]->[a1,b0,a0], a0==b1);

REDUCE：分划中的所有键值对，通过一个Key表达式计算新Key，对Key值相同的所有Value执行合并函数。
示例表达式：REDUCE([SPLIT(x0, 2)], g(x0, x1), [a0,a1]->1, a0>=0);
输入：
1、分划集
2、执行的函数式（每次 REDUCE 的合并运算是 取键值相同两组数据，塞入函数式中运算，因此函数式的变量个数要乘2）
3、Key集变换函数
4、Key的准入条件（全部合并可以不输入）
REDUCE算符认为合并的先后顺序与最终计算结果无关，并基于此做并行，排序/求和/求最大值等满足此要示，连除不能满足要求。
最后一个条件表达式可以不输入，这样默认对Key相同的所有值做合并
支持多个分划：
如：REDUCE([SPLIT(x0), SPLIT(x1)], g(x0, x1, x2, x3), [[a0], [b0]]->1)


四、典型例子
矩阵相乘的分划表示：
Product(A, B);
MERGE(REDUCE(MAP([SPLIT(A), SPLIT(B)], Product(x0, x1), [[a0, a1], [b0, b1]]->[a0,b1,a1], a1==b0), Add(x0, x1), [a0, a1, a2]->[a0, a1]));

如两个矩阵A(10000*8000) X B(8000*6000)相乘：

分划产生：
先分划成100*100的一系列小矩阵：
SPLIT(A)：a0:0-99,a1:0-79
SPLIT(B)：b0:0-79,b1:0-59

分划运算：
第一步：取 A、B两个矩阵a1=b0的矩阵块相乘，得到c，对应Key值置为[a0, b1, a1]
第二步：将 C 集合中同一个位置的矩阵进行相加，合并矩阵，Key集最后一维消掉

分划合并：
按 [a0, a1] 的顺序，把计算出的100*100矩阵填充到指定的大矩阵位置上。
