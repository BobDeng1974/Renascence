一、分划定义
GPPieces
分划包括两部分，Key集合与数据索引
（1）Key集合：每个Key是一个非负整数组，所有Key的维度相同
（2）Value集合/数据索引：用以在实际运算中根据Key值提取数据
一个分划中所有提取出的Value，必须是同一数据类型。

分划的具体实现依赖Renascence子执行器和算法库，在用户层面，分划就是一系列Key-Value对
注意：分划并非单独的一种数据结构，它的性质还与Value相关。
支持分划的数据类型(IStatusType)必须实现如下三个接口，以便平台作分布式/持久化实现：
vSave：将数据保存到输出流
vLoad：从输入流中创建并读取数据
vMeasure：测量数据所需要占内存的大小

二、分划函数
定义分划函数
Eg:
Y0=F(X0, p0) : MAP({y0=f(x0,p0)}, [a0]->[a0], a0>=0);

冒号左边：
X0,X1,X2...：表示分划输入
Y0:表示分划输出
p0,p1,p2...：表示系数输入，这个为普通类型，对分划的所有key值都一致
F：定义的函数名，后续可使用

冒号右边：
y0：Y0分划中的一个value
x0：X0分划中的一个value
p0：冒号左边的系数
MAP：分划运算符，定义在后面讲述
a0: 分划X0的key，0表示第0维，a,b,c,d分别表示X0,X1,X2,X3的key，如b1则表示X1的key的第1维

使用分划函数：
x = ...
p = ...
y = F(x,p)



三、分划运算符
分划运算符，输出结果均为一个分划
包括 MAP, REDUCE，KEYFUNC


MAP：分划中的所有键值对，通过一个Key表达式计算新Key，新Key所对应的Value是经过函数计算后的Value。
示例表达式：
MAP({y0=f(x0)}, [a0], a0>=0);
输入：
1、对每个value的运算式
2、输出Key集表示
3、Key的准入条件
当Key集合不需要发生改变，只需要对每个Value应用函数时，后面两个Key表达式可以不输
如：MAP({y0=f(x0)});

可以输入多个分划，并做合并：
Eg：
ProductM(X0,X1) = MAP({y0=Product(x0, x1)}, [a1,b0,a0], a0==b1);

REDUCE：分划中的所有键值对，通过一个Key表达式计算新Key，对Key值相同的所有Value执行合并函数。
合并函数为两两合并，第一组变量用x0,x1,x2...，第二组变量用y0,y1,y2
示例表达式：REDUCE({y0=x0},{y0=g(x0, y0)},[],a0>=0);
输入：
1、对单个value，初始化输出value的运算式
2、对每个value和输出value合并的运算式
3、输出Key集表示
4、Key的准入条件
REDUCE算符认为合并的先后顺序与最终计算结果无关，并基于此做并行，排序/求和/求最大值等满足此要示，连除不能满足要求。
最后一个条件表达式可以不输入，这样默认对Key相同的所有值做合并
支持多个分划：
如：REDUCE({y0,y1=x0,x1},{y0,y1=g(x0, x1, y0, y1)},[])

注：MAP 和 REDUCE 的区别在于，MAP 是对Key不相同的键值对执行函数，REDUCE 是对Key相同的一系列键值对，两两执行函数。

在 MAP 和 REDUCE 无法表示的情形下，使用 KEYFUNC，并编写Key值运算脚本：

KEYFUNC：运行自定义的Key运算函数
输入：
1、Key函数代码（类python脚本）

示例表达式：
KEYFUNC((x0, x1), functionKey);
functionKey(X0,X1):{
                target = Init([len(x0.key), len(x1.key)])
                for a0 in x0.key:
                    for b0 in x1.key:
                        u0 = Call(Join, [x0.load(a0), x1.load(b0)])
                        target.save([a0[0], b0[0]], u0)
                return target
            }
这个表达式描述了sql语句中的join操作，

归并排序的一个例子：
MergeSort为GP函数，输入两个有序数组，返回两个有序数组，其中前一个数组的每个元素均比第二个数组的元素小
sortFunction(X0):{
                 target = Init([len(x0.key)])
                 size = len(x0.key)
                 i = 0
                 u = x0.load([i])
                 for j in range(1, size):
                     v = x0.load([j])
                     [u, v] = Call(MergeSort, [u, v])
                     target.save([j], v)
                 target.save([0], u)
                 for i in range(1, size):
                     for j in range(i+1, size):
                         [u,v] = Call(MergeSort, [target.load([i]), target.load([j])])
                         target.save([i], u)
                         target.save([j], v)
                 return target
             }
python脚本可以用引擎直接执行，但在实际的运算中，由GP解释器去执行

四、典型例子
矩阵相乘的分划表示：
Y0 = ProductFirst(X0,X1) : MAP({y0=Product(x0,x1)},[a0,b1,a1],a1==b0);
Y0 = ProductSecond(X0) : REDUCE({y0=x0},{y0=Add(x0,y0)},[a0,a1]);
Y0 = Product(X0,X1) : ProductSecond(ProductFirst(X0,X1))

如两个矩阵A(10000*8000) X B(8000*6000)相乘：

分划产生：
先分划成100*100的一系列小矩阵：
a0:0-99,a1:0-79
b0:0-79,b1:0-59

分划运算：
第一步：取 A、B两个矩阵a1=b0的矩阵块相乘，得到c，对应Key值置为[a0, b1, a1]
第二步：将 C 集合中同一个位置的矩阵进行相加，合并矩阵，Key集最后一维消掉

分划合并：
按 [a0, a1] 的顺序，把计算出的100*100矩阵填充到指定的大矩阵位置上。

