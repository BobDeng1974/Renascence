带*号表示未开发，带&号表示只实现部分或实现方式需要重写

1、提供编写软件的IDE，允许用户在指导将各个结点结合成一个软件
2、提供软件自动生成的功能，在两个结点中自动生成连线结构
3、提供修正功能，通过GP驱动，将计算性结点重新组合
4、提供每种结点的状态查询和调试功能


程序框架：
Core: 稳定性最强的部分，用户完全不需关注
	GeneticProgram：抽象的程序对象，只有函数、状态Id和相应的连接关系
	调用：无
	功能：提供抽象程序架构
	*GeneticView：将GeneticProgram展示为图片
	调用：GeneticProgram

System:需要适配
关于system的一些table载入以后采取xml读取的方式
computeSystem, statusSystem需要手动做下适配，functionDataBase和dataSystem需要挑选，GenerateSystem可以引入自身的算法
	&functionDataBase：储存计算函数库，包括两部分，一部分是原始函数，一部分是将原始函数经过转换后的规则函数（机器代码）
	（高级的计算函数库将包括分类与查找的功能。）
	*dataSystem：根据取数据的方式，可从functionDataBase分离出dataSystem，以专门负责数据的管理
	computeSystem：
	调用：functionDataBase
	管理：mapFunction，computeFunction的依赖关系表
	功能：
		1、提供mapFunction通过访问functionDataBase
		2、提供GeneticProgram程序计算所需的compute函数
		3、通过依赖关系表，为设定或自动生成GeneticProgram提供依据。
		*4、提供适应度计算的函数，也即计算结果好坏的评价(改为由函数库提供)
	statusSystem：
	调用：functionDataBase（函数是否支持状态处理，支持什么类型的状态处理是由函数库提供的）
	管理：状态映射函数（statusMapFunction）、状态设定函数、状态数据
	功能：
		1、根据使用的函数，创建相应的状态列表，以便给结点发放状态Id
		2、提供statusMapFunction，以便将结点的状态Id转换为实际状态变量。
		3、提供状态申请功能，GenerateSystem在生成结点时，可以向此系统申请状态内存
		4、提供每个结点的状态查询与设定功能
	GenerateSystem：
	调用：statusSystem, computeSystem
	管理：生成GeneticProgram的数集
	功能：为GeneticProgram的生成与变换提供数集，GeneticProgram只能通过数集进行确定性的变换，随机性在GenerateSystem生成数集的过程中反映。

user:开发软件时需要列出需求表，测试表，并且可能需要写少量自己的函数
	userFunction：自用函数，在函数库中的函数不足以满足需求的情况下编写
	*fixTable：输出匹配表
	*test：测试用例表
	*statusTable：状态数据表

ass:调试用程序，打印日志必须用debug.h中的宏或函数

主程序：
1、必须依赖：GeneticProgram、computeSystem
2、存在状态性函数，需要追加状态管理则加 statusSystem
3、需要显示，追加 GeneticView
4、需要在编辑GeneticProgram知道操作是否合法，需要智能生成GeneticProgram：追加GenerateSystem



一种函数库设计：
1、所有的函数均被封装为一系列的so，附带xml提供函数名、函数输入输出类型，输入类型集等。
2、所有被封装的函数均是GP指定的类型。
3、函数库在初始化时根据总XML表去查找并打开相应的so，构建成函数表。
4、根据函数的输入类型（只允许是类型指针）构建匹配表
5、根据函数的状态类型，自动生成状态表相关代码。
6、状态的改变函数额外设计。

9.8 TODO
1、补充evolution_tree只变状态的变异方法（完成）
2、补充全搜索的提供，补充全搜索中状态的申请（完成）
3、补充变异时对状态的释放，补充挎贝时对状态的同步挎贝（完成）
4、补充转接法，在最后一步时，将输出函数由适应度计算转变为输出图片（完成）
5、补充状态的打印方法（完成）

9.15 TODO
1、函数系统、状态系统的xml制作规范与解析算法（完成）
2、多元线性回归的数学库（完成）
3、修正规范函数为 void* func(vector<void*> inputs, vector<void*> status),以与状态组合匹配（完成）
4、修正状态打印函数为 string func(void*)（完成）

9.19 TODO
1、追加string输出的GeneticProgram打印方法，此为标准打印法则（完成）
2、修改GP生长、变异机制为函数赋予形式（取消，改为增加一个状态变异方法）（完成）
3、修改GenerateSystem：（1）使之在生成序列过长时折断。（完成）（2）事先对所有函数类型判断是不是可加入的函数（不会构成死循环）（更新）

9.25 TODO
1、尽快完成9.8 9.15 9.19的残留任务
2、根据 require.txt的需求分析，编写相关的介绍文档并详细说明
3、寻找资源协助并分解任务
4、阅读最新的GP相关文献

10.7 TODO
1、制定将GP的输出转变为程序的方案，并实施（暂缓）
2、制定函数固化的方案并实施。（完成）

10.9 Points
1、构思package函数重用的方式。
2、构思交叉验证的实现方式

10.11 TODO
1、提供GP的xml、so匹配校验方法，允许用户在启动evolution之前先进行检查，看xml是否匹配。
2、设计不同so之间衔接的方式，追加函数output、input属性，在存在input属性时，寻找有output相同类型的函数作为输入，而非直接指定。
（1）so内部，也即单一模块内部的xml文件中，主要通过指定函数输入来衔接。
（2）模块要和外部模块打交道，引用其他模块的函数时，按类型匹配来衔接，即本模块指定输入类型，系统在所有模块函数中查输出类型并与之适配。
3、确定作用范围尽可能大的公共类型说明

10.13 TODO
1、追加带输入输出的GP运算方式
2、构思GP中函数转换的方式


10.20 架构修改
1、取消functionDataBase、statusSystem，其功能集中至computeSystem中实现
2、原先的mapFunction方式改为传入函数列表。
*3、设立同构函数机制，同构的函数可以相互替换，同构函数由computeSystem认定，GP提供API去替换同构函数（完成）
*4、函数匹配采用指定函数匹配（模块内）和类型匹配（模块外）两种方式，GenerateSystem根据指定的类型去生成函数树

10.22 TODO
1、编写执行GP生成结果——xml的程序（完成）

10.27 TODO
1、编写输入、输出的标准方法
2、编写反向GP运算和单向游动型GP运算方法
3、拆分GP的编译，分离出进化、执行与UT框架（初步完成）
4、独立训练与执行为两个库函数（初步完成）
5、处理run和evolution在使用相同的库时发生冲突的问题（完成）

11.1 输入方案
1、所有可输入的参数作为一系列的输入资源，由xml表示。
2、演化器通过某种特定的输入分配规则，为需要输入的函数分配资源，这种分配规则也可以用GP表示且加以演化。


11.6 TODO
1、编写GP使用文档，xml文法说明
2、编写一个轻量极的GP使用Demo（完成2014.1.12）

2014.1.1 TODO
1、修改evolution_tree，使之支持自定义适应度计算方法（完成）
2、重构status部分代码（2.23完成）

2014.1.3 TODO
1、解决状态保存与SO状态强相关的问题（2.23完成）

2014.1.13 TODO
1、编写一个通用单值函数树，以应对一些需要这类函数进行较快速计算的情况
2、完成输入输出匹配的部分：输入输出均以一关键字（类似于文件的扩展名）进行标识，建立不同模块间的函数连接关系时根据输入输出的关键字进行匹配（部分完成，目前可按类型查找）

2014.2.22 TODO
1、修改evolution_tree及GenerateSystem涉及算法搜索的部分，取消静态变量，改成局部性变量（增加新的API，完成）

2014.2.23 TODO
1、增加GenerateSystem按变量名或函数名变换输出的功能，将GenerateSystem的用法改为指定输出类型来输出GP（重构GenerateSystem，完成）
2、编写部分标准数据状态类（不需要，关闭）
3、解决内存分配问题（目前函数输出中申请内存与释放内存不在同一模块，使用内存池或其他内存方式时存在问题）

2014.3.24 TODO
1、增加翻译xml结果文件为C++代码的功能
2、增加xmlGenerateSystem导入gp的功能（完成）

2014.3.30 TODO
1、对于Evolution定义一个新的类型名，规定所有模块中以此类型名为输出的即为适应度计算函数（不需要，取消）
2、规定Package函数的输入输出指定只允许是接口类
3、规定模块内部类型的概念，增加根据模块内部类型匹配模块间函数的方法
4、增加翻译指定API函数为xml和GP的package程序的脚本

2014.3.31
1、添加部分基础算法（取消）

2014.4.7
1、修改读入函数列表的方法，改为根据function所需而添加属性值（完成）
2、研究 xmlEvolution 比 原来的 api慢的原因（mutate原因，已经解决）

2014.4.9
1、优化搜索算法，目前耗时较长
2、简化api，增加按函数名称、输出类型名称搜索函数的功能

2014.4.16(梳理)
1、编写GP使用文档，xml文法说明
2、编写一个通用单值函数树，以应对一些需要这类函数进行较快速计算的情况
3、优化搜索算法，目前耗时较长
4、简化api，增加按函数名称、输出类型名称搜索函数的功能
5、解决内存分配问题（目前函数输出中申请内存与释放内存不在同一模块，使用内存池或其他内存方式时存在问题）（取消，按架构而言没有必要）
6、增加翻译xml结果文件为C++代码的功能
7、增加翻译指定API函数为xml和GP的package程序的脚本
8、确定一个比较合适的模块间交互的方式

2014.5.8 规划：
一、编写GP的测试与构造框架，支持对满足GP函数格式要求的函数进行自动化测试，同时支持对GP函数进行批量化构造。
1、独立模块（gpsuit），编成可执行文件 GP_SUIT，用法：GP_SUIT YYY（文件夹）
2、测试内容构成：
（1）运行环境runtime.xml，相应的lib库
（2）一系列函数xml文件夹，如 YYY/ball/：
a、standard.xml 表示待测试的函数
b、autoMachine.xml：当找不到standard.xml时，会为满足输入输出集去构造函数，结果写在此文件中（此文件亦表示每次构造时的初始最优函数）。
c、YYY/ball/input 文件夹，里面由一系列表征输入的xml文件和资源文件构成。xml文件的命名按照如下规范：  XXX_GP_Input.xml（XXX可用任意字符串替代）
d、YYY/ball/output 文件夹，里面由一系列表征GP_Output的xml文件和资源文件构成，表示某个input期望的输出，xml命名规则为 XXX_GP_Output.xml 当XXX与input文件的文件名前缀相同时，视为匹配。
e、compare.xml 表示用来比较期望输出和实际输出的函数，要求输出0~1范围的double类型，0表示两者最相近，1表示两者相差极大不可接受。如果为空，则采用默认的比较方法：优先匹配变量名（变量名有不同直接取1），然后对资源文件作二进制比较，计算误差率。
（3）result.txt
记录测试的结果和构造的结果
4、支持 -B 功能，无视autoMachine.xml的存在重新创建函数

二、基于GP测试/构造框架的测试驱动开发
1、设计函数功能
2、准备输入输出文件，设置compare函数
3、执行GP_SUIT构造函数
4、若构造成功，进入6
5、构造失败，修改源文件，重新编译出lib，修改runtime.xml文件，返回3，保证全部的用例通过。
6、将构造成功的xml归档，添入ADF库中
注：compare.xml函数，必须使用默认的比较方法以进行测试

2014.7.31
1、实现算式构造（输入一个表达式，按表达式构建GP，同时也支持反向提取）（完成）

2014.8.7
1、规定默认状态类，以便在库使用这种类时，进行自动构建（ABORT）

2014.9.9
1、编写网格搜索的演化类（完成）
2、修改GPTreeProducer为依靠inputType确定依赖关系（ABORT）
3、多so支持（DONE）
4、对于statusType，增加接口，允许用户判断相关的函数是否存在。（DONE）

2014.9.21
1、规定图状GP的xml表达文法，编写图状GP的生成类（暂只考虑从xml信息构建）（DONE）

2014.9.26
1、编写自动生成标准函数的py文件（DONE）

2014.11.17
1、架构修改，去除status类的load、save和mutate，以统一的map替代(DONE)

2015.3.29
GP工具箱开发计划
功能：
1、构建函数
（1）根据输入输出和基础xml表构建函数
（2）根据输入的基准模板构建函数
2、执行函数
（1）根据函数表和模板表，创建函数，得到其输入输出信息
（2）根据函数表和模板表，创建函数，并根据输入的文件名，构建输入流，创建相关输入，根据输出的文件名，导出输出

目录规划：
建gptool目录
用C++和python两种语言编写
C++的编译为gptool.out可执行文件
用法：
create
run

gptool.out create func.xml input=TrBmp, output=TrBmp fit=NULL outputfunc=outf.xml
gptool.out opt func.xml model.xml fitf.xml outf.xml
gptool.out run func.xml outputfunc.xml input=1.txt,2.jpg output=3.jpg


2015.6.29
1、引入流机制（完成）

2015.7.27
1、ADF导入导出机制重构（完成）

2015.9.19
1、修改随机数算法
2、实现根据输入输出类型完成函数匹配的机制（9.24完成）

2015.9.24
1、加入创建函数的filter机制，输入关键字，过滤所得函数
2、完善createFromFormula机制，支持输入变量（10.1更改）

几个需要研究的问题
1、函数匹配关系，是否支持不定输入输出函数
2、非树形函数生成方案，需要参考GP相关论文
3、随机数生成与尽可能的参数精度
4、树形函数优化方案
5、代码生成与简化

2015.9.26
1、vMutate方案修改，加一个参数供 ADF 去决策如何变异结构，取消ADF中变异的随机权限（9.30完成）

2015.9.28
1、加入 GPTreeADF 转化为 流式ADF 的接口，以便支持流式运算逻辑自生成
2、完善输入适配机制
3、GPContent加入引用计数机制/metaData（可选）

2015.9.29
1、在函数生成逻辑中支持多输出函数
2、开放遍历函数的API

2015.10.1
1、在createFromFormula接口中支持模糊逻辑，允许其中一部分逻辑由GP生成（方案设计完成，待实现）
2、添加函数注册的API，允许上层将自用函数信息注册进函数库中，参与逻辑自生成

2015.10.26
1、完善由公式语法创建GP的框架

2015.10.27
GP 逻辑生成的重构方案
按编译原理，基本流程改成如下：
公式——语法树——抽象句法树（此处进行逻辑自生成补全）——ADF（ADF生成器根据抽象句法树生成ADF）
演化过程：
抽象句法树变异——重新生成ADF——重新进行计算
